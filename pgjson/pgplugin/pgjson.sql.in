SET client_min_messages TO warning;

BEGIN;

   
/*** jsonbinary datatype ***/
DROP TYPE IF EXISTS jsonbinary CASCADE;
CREATE TYPE jsonbinary;

CREATE OR REPLACE FUNCTION jsonbinary_in(cstring)
   RETURNS jsonbinary
   AS 'MODULE_PATHNAME','pgjson_jsonbinary_in'
   LANGUAGE 'C' IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION jsonbinary_out(jsonbinary)
   RETURNS cstring
   AS 'MODULE_PATHNAME', 'pgjson_jsonbinary_out'
   LANGUAGE 'C' IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION jsonbinary_recv(internal)
   RETURNS jsonbinary
   AS 'MODULE_PATHNAME', 'pgjson_jsonbinary_recv'
   LANGUAGE 'C' IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION jsonbinary_send(jsonbinary)
   RETURNS bytea
   AS 'MODULE_PATHNAME', 'pgjson_jsonbinary_send'
   LANGUAGE 'C' IMMUTABLE STRICT;
   
CREATE TYPE jsonbinary (
   internallength = variable,
   alignment = int4,
   storage = main,
   input = jsonbinary_in,
   output = jsonbinary_out,
   send = jsonbinary_send,
   receive = jsonbinary_recv
);

/*   
CREATE CAST (jsonbinary AS text)
   WITH FUNCTION jsonbinary_to_text(jsonbinary)
   AS ASSIGNMENT;
CREATE CAST (text AS jsonbinary)
   WITH FUNCTION jsonbinary_from_text(text)
   AS ASSIGNMENT;
CREATE CAST (varchar AS jsonbinary)
   WITH FUNCTION jsonbinary_from_varchar(varchar)
   AS ASSIGNMENT;
CREATE CAST (jsonbinary as bytea)
   WITHOUT FUNCTION
   AS IMPLICIT;
CREATE CAST (bytea as jsonbinary)
   WITHOUT FUNCTION
   AS IMPLICIT;
   */
   
/*** json datatype ***/
DROP TYPE IF EXISTS json CASCADE;
CREATE TYPE json;

CREATE OR REPLACE FUNCTION jsontext_in(cstring)
   RETURNS json
   AS 'MODULE_PATHNAME','pgjson_jsontext_in'
   LANGUAGE 'C' IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION jsontext_out(json)
   RETURNS cstring
   AS 'MODULE_PATHNAME', 'pgjson_jsontext_out'
   LANGUAGE 'C' IMMUTABLE STRICT;

CREATE TYPE json (
   internallength = variable,
   alignment = int4,
   storage = main,
   input = jsontext_in,
   output = jsontext_out
);

CREATE OR REPLACE FUNCTION AsJsonText(json)
   RETURNS text
   AS 'MODULE_PATHNAME', 'pgjson_json_asjsontext'
   LANGUAGE 'C' IMMUTABLE;
CREATE OR REPLACE FUNCTION AsJsonTextSilent(json)
   RETURNS text
   AS 'MODULE_PATHNAME', 'pgjson_json_asjsontextsilent'
   LANGUAGE 'C' IMMUTABLE;
   
CREATE OR REPLACE FUNCTION ParseJson(text)
   RETURNS json
   AS 'MODULE_PATHNAME', 'pgjson_json_parse'
   LANGUAGE 'C' IMMUTABLE;
CREATE OR REPLACE FUNCTION ParseJsonSilent(text)
   RETURNS json
   AS 'MODULE_PATHNAME', 'pgjson_json_parsesilent'
   LANGUAGE 'C' IMMUTABLE;

/* casts between json and jsonbinary */
CREATE CAST (json AS jsonbinary)
   WITHOUT FUNCTION
   AS IMPLICIT;
CREATE CAST (jsonbinary AS json)
   WITHOUT FUNCTION
   AS IMPLICIT;

/* other primitive casts */
/*
CREATE CAST (json AS text)
   WITH FUNCTION json_to_text(json)
   AS ASSIGNMENT;
CREATE CAST (text AS json)
   WITH FUNCTION json_from_text(text)
   AS ASSIGNMENT;
CREATE CAST (varchar AS json)
   WITH FUNCTION json_from_varchar(varchar)
   AS ASSIGNMENT;
CREATE CAST (json as bytea)
   WITHOUT FUNCTION
   AS IMPLICIT;
CREATE CAST (bytea as json)
   WITHOUT FUNCTION
   AS IMPLICIT;
*/

/*** jsonpath datatype ***/
DROP TYPE IF EXISTS jsonpath CASCADE;
CREATE TYPE jsonpath;

CREATE OR REPLACE FUNCTION jsonpath_in(cstring)
   RETURNS jsonpath
   AS 'MODULE_PATHNAME', 'pgjson_jsonpath_in'
   LANGUAGE 'C' IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION jsonpath_out(jsonpath)
   RETURNS cstring
   AS 'MODULE_PATHNAME', 'pgjson_jsonpath_out'
   LANGUAGE 'C' IMMUTABLE STRICT;

CREATE TYPE jsonpath (
   internallength = variable,
   alignment = int4,
   storage = main,
   input = jsonpath_in,
   output = jsonpath_out
);

/*** evaluation and type cast functions ***/
CREATE OR REPLACE FUNCTION jsoneval(json, jsonpath)
   RETURNS json
   AS 'MODULE_PATHNAME', 'pgjson_jsonpath_eval'
   LANGUAGE 'C' IMMUTABLE STRICT;
CREATE OPERATOR -> (
   PROCEDURE = jsoneval,
   LEFTARG = json,
   RIGHTARG = jsonpath
);

/*** type casts ***/
CREATE OR REPLACE FUNCTION json_to_integer(json)
   RETURNS integer
   AS 'MODULE_PATHNAME', 'pgjson_json_to_integer'
   LANGUAGE 'C' IMMUTABLE;
CREATE OR REPLACE FUNCTION json_from_integer(integer)
   RETURNS json
   AS 'MODULE_PATHNAME', 'pgjson_json_from_integer'
   LANGUAGE 'C' IMMUTABLE;
   
CREATE OR REPLACE FUNCTION json_to_bigint(json)
   RETURNS bigint
   AS 'MODULE_PATHNAME', 'pgjson_json_to_bigint'
   LANGUAGE 'C' IMMUTABLE;
CREATE OR REPLACE FUNCTION json_from_bigint(bigint)
   RETURNS json
   AS 'MODULE_PATHNAME', 'pgjson_json_from_bigint'
   LANGUAGE 'C' IMMUTABLE;

CREATE OR REPLACE FUNCTION json_to_doubleprecision(json)
   RETURNS double precision
   AS 'MODULE_PATHNAME', 'pgjson_json_to_doubleprecision'
   LANGUAGE 'C' IMMUTABLE;
CREATE OR REPLACE FUNCTION json_from_doubleprecision(double precision)
   RETURNS json
   AS 'MODULE_PATHNAME', 'pgjson_json_from_doubleprecision'
   LANGUAGE 'C' IMMUTABLE;

CREATE OR REPLACE FUNCTION json_to_text(json)
   RETURNS text
   AS 'MODULE_PATHNAME', 'pgjson_json_to_text'
   LANGUAGE 'C' IMMUTABLE;
CREATE OR REPLACE FUNCTION json_from_text(text)
   RETURNS json
   AS 'MODULE_PATHNAME', 'pgjson_json_from_text'
   LANGUAGE 'C' IMMUTABLE;

CREATE OR REPLACE FUNCTION json_to_varchar(json)
   RETURNS varchar
   AS 'MODULE_PATHNAME', 'pgjson_json_to_text'
   LANGUAGE 'C' IMMUTABLE;
CREATE OR REPLACE FUNCTION json_from_varchar(varchar)
   RETURNS json
   AS 'MODULE_PATHNAME', 'pgjson_json_from_text'
   LANGUAGE 'C' IMMUTABLE;

CREATE OR REPLACE FUNCTION json_to_bytea(json)
   RETURNS bytea
   AS 'MODULE_PATHNAME', 'pgjson_json_to_bytea'
   LANGUAGE 'C' IMMUTABLE;
CREATE OR REPLACE FUNCTION json_from_bytea(bytea)
   RETURNS json
   AS 'MODULE_PATHNAME', 'pgjson_json_from_bytea'
   LANGUAGE 'C' IMMUTABLE;

CREATE OR REPLACE FUNCTION json_to_boolean(json)
   RETURNS boolean
   AS 'MODULE_PATHNAME', 'pgjson_json_to_boolean'
   LANGUAGE 'C' IMMUTABLE;
CREATE OR REPLACE FUNCTION json_from_boolean(boolean)
   RETURNS json
   AS 'MODULE_PATHNAME', 'pgjson_json_from_boolean'
   LANGUAGE 'C' IMMUTABLE;

CREATE OR REPLACE FUNCTION json_to_timestamp(json)
   RETURNS timestamp without time zone
   AS 'MODULE_PATHNAME', 'pgjson_json_to_timestamp'
   LANGUAGE 'C' IMMUTABLE;
CREATE OR REPLACE FUNCTION json_from_timestamp(timestamp without time zone)
   RETURNS json
   AS 'MODULE_PATHNAME', 'pgjson_json_from_timestamp'
   LANGUAGE 'C' IMMUTABLE;

CREATE CAST (json as integer) WITH FUNCTION json_to_integer(json) AS IMPLICIT;
CREATE CAST (json as bigint) WITH FUNCTION json_to_bigint(json) AS IMPLICIT;
CREATE CAST (json as double precision) WITH FUNCTION json_to_doubleprecision(json) AS IMPLICIT;
CREATE CAST (json as text) WITH FUNCTION json_to_text(json) AS IMPLICIT;
CREATE CAST (json as varchar) WITH FUNCTION json_to_varchar(json) AS IMPLICIT;
CREATE CAST (json as bytea) WITH FUNCTION json_to_bytea(json) AS IMPLICIT;
CREATE CAST (json as boolean) WITH FUNCTION json_to_boolean(json) AS IMPLICIT;
CREATE CAST (json as timestamp without time zone) WITH FUNCTION json_to_timestamp(json) AS IMPLICIT;

CREATE CAST (integer as json) WITH FUNCTION json_from_integer(integer) AS IMPLICIT;
CREATE CAST (bigint as json) WITH FUNCTION json_from_bigint(bigint) AS IMPLICIT;
CREATE CAST (double precision as json) WITH FUNCTION json_from_doubleprecision(double precision) AS IMPLICIT;
CREATE CAST (text as json) WITH FUNCTION json_from_text(text) AS IMPLICIT;
CREATE CAST (varchar as json) WITH FUNCTION json_from_varchar(varchar) AS IMPLICIT;
CREATE CAST (bytea as json) WITH FUNCTION json_from_bytea(bytea) AS IMPLICIT;
CREATE CAST (boolean as json) WITH FUNCTION json_from_boolean(boolean) AS IMPLICIT;
CREATE CAST (timestamp without time zone as json) WITH FUNCTION json_from_timestamp(timestamp without time zone) AS IMPLICIT;

COMMIT;

